plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'checkstyle'
    id 'pmd'
    id 'com.github.spotbugs' version "4.6.0"
    id "org.sonarqube" version "3.1.1"
}

group = 'org.example'
version = '1.0-SNAPSHOT'
sourceCompatibility = 11

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    integrationTestImplementation {
        extendsFrom testImplementation
    }
    integrationTestRuntime {
        extendsFrom testRuntime
    }
}

repositories {
    mavenCentral()
}

ext{
    set('findsecbugsversion', '1.7.1')
    set('openapiVersion', '1.5.3')
    set('springSecurityVersion', '2.5.0.RELEASE')
    set('testcontainersVersion', '1.15.2')
    set('restAssuredVersion', '4.2.1')
    set('postgresqlVersion', '42.2.18')
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
    }
}

task integrationTest(type: Test) {
    group 'springboot-testing'
    description 'Runs the integration tests'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    compile "org.springdoc:springdoc-openapi-ui:${openapiVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.springframework.security.oauth:spring-security-oauth2:${springSecurityVersion}"
    implementation "org.postgresql:postgresql:${postgresqlVersion}"

    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugsversion}"
    testCompile "org.springdoc:springdoc-openapi-webmvc-core:${openapiVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"
    testImplementation "io.rest-assured:json-path:${restAssuredVersion}"
    testImplementation "io.rest-assured:xml-path:${restAssuredVersion}"
    testImplementation "io.rest-assured:rest-assured-common:${restAssuredVersion}"


}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

checkstyle {
    toolVersion = 8.39
    ignoreFailures = false
    showViolations = true

}

pmd {
    ignoreFailures = false
    toolVersion = "6.31.0"
}
pmdTest {
    enabled = false
}
spotbugs {
    ignoreFailures = false
    showStackTraces = true
    showProgress = true
    effort = 'max'
    visitors = ['FindSqlInjection', 'SwitchFallthrough']
    omitVisitors = ['FindNonShortCircuit']
}

bootJar {
    launchScript()
}

tasks['sonarqube'].dependsOn test
check.dependsOn integrationTest
integrationTest.mustRunAfter test